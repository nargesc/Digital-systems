from machine import Pin
import time

# Define inputs
button = Pin(7, Pin.IN, Pin.PULL_UP)  # SW2 (0 = pressed)
alarm_signal = Pin(9, Pin.IN, Pin.PULL_UP)  # SW0 (0 = alarm active)

# Define outputs
red_light = Pin(22, Pin.OUT)  # LED1
siren = Pin(20, Pin.OUT)  # LED3

# States
IDLE = 0         # S0: OFF
ACTIVE_ALARM = 1 # S1: Alarm Active
ACK_ALARM = 2    # S2: Acknowledge (Stopping Siren)
BLINKING = 3     # S3: Red Light Blinking (Alarm still active)
SOLID_RED = 4    # S4: Red Light Solid (Alarm deactivated before acknowledgment)

# Initial state
state = IDLE
blink_timer = time.ticks_ms()

while True:
    if state == IDLE:  # S0: OFF
        red_light.value(0)
        siren.value(0)
        if alarm_signal.value() == 0:  # Alarm activated
            state = ACTIVE_ALARM

    elif state == ACTIVE_ALARM:  # S1: Alarm Active
        red_light.value(1)
        siren.value(1)
        if button.value() == 0:  # Button pressed (acknowledge)
            state = ACK_ALARM

    elif state == ACK_ALARM:  # S2: Acknowledge
        siren.value(0)  # Turn off siren
        if alarm_signal.value() == 0:  # Alarm still active
            state = BLINKING
        else:
            state = SOLID_RED  # Move to S4 if alarm deactivated

    elif state == BLINKING:  # S3: LED1 Blinking
        siren.value(0)
        # Blinking logic
        if time.ticks_ms() - blink_timer > 500:  # Toggle every 500ms
            red_light.value(not red_light.value())
            blink_timer = time.ticks_ms()
        if alarm_signal.value() == 1:  # Alarm deactivated
            state = SOLID_RED

    elif state == SOLID_RED:  # S4: LED1 Solid
        siren.value(0)
        red_light.value(1)  # Keep red light ON
        if button.value() == 0:  # Button pressed to acknowledge final state
            state = IDLE  # Return to OFF state

    time.sleep(0.1)  # Small delay for stability
